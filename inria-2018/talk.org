#+TITLE: Effective
#+TITLE: programming

#+AUTHOR: Leo White

~Stephen Dolan, Matija Pretnar, Daniel HillerstrÃ¶m, KC Sivaramakrishnan~
#+PROPERTY: header-args :results verbatim
#+LATEX_HEADER: \usepackage{bussproofs}
#+LATEX_HEADER: \usepackage{multicol}
#+LATEX_HEADER: \newcommand{\Et}{\mathrel{;}}
#+LATEX_HEADER: \newcommand{\HasType}{\mathrel{:}}
#+LATEX_HEADER: \newcommand{\HasEffect}{\mathrel{!}}
#+LATEX_HEADER: \newcommand{\Context}{\Gamma}
#+LATEX_HEADER: \newcommand{\VDash}{\mathrel{\vdash}}
#+LATEX_HEADER: \newcommand{\Row}{\ensuremath{\Delta}}
#+LATEX_HEADER: \newcommand{\RowTo}{\xrightarrow{\Row}}
#+LATEX_HEADER: \newcommand{\Equal}[2]{{#1}\mathrel{\cong}{#2}}
#+LATEX_HEADER: \newcommand{\Eff}{\ensuremath{\mathcal{E}}}
#+LATEX_HEADER: \newcommand{\Or}{\mid}
#+LATEX_HEADER: \newcommand{\Open}{[ \;}
#+LATEX_HEADER: \newcommand{\Close}{\; ]}
#+LATEX_HEADER: \newcommand{\Def}{\; ::= \; \; \;}
#+LATEX_HEADER: \newcommand{\Dividor}{\; \; \; \Arrowvert \; \; \;}

* Concurrency

#+BEGIN_SRC ocaml :session multi :cmd ~/Repositories/ocaml-multicore/_install/bin/ocaml
let rec foo id depth =
  if depth > 0 then begin
    Printf.printf "Forking %d\n" (id * 2 + 1);
    perform (Fork (fun () -> foo (id * 2 + 1) (depth - 1)));
    Printf.printf "Forking %d\n" (id * 2 + 2);
    perform (Fork (fun () -> foo (id * 2 + 2) (depth - 1)))
  end else begin
    Printf.printf "Yielding in %d\n" id;
    perform Yield;
    Printf.printf "Resumed number %d\n" id;
  end
#+END_SRC
#+RESULTS:

* Scheduler

#+BEGIN_SRC ocaml :session multi :cmd ~/Repositories/ocaml-multicore/_install/bin/ocaml
let schedule f =
  let run_q = Queue.create () in
  let rec fork f =
    match f () with
    | () ->
        if Queue.is_empty run_q then ()
        else continue (Queue.pop run_q) ()
    | effect Yield k ->
        Queue.push k run_q; continue (Queue.pop run_q) ()
    | effect (Fork f) k ->
        Queue.push k run_q; fork f
  in
  fork f
#+END_SRC
#+RESULTS:

* Scheduler

#+BEGIN_SRC ocaml :session multi :cmd ~/Repositories/ocaml-multicore/_install/bin/ocaml
let () = schedule (fun () -> foo 0 3)
#+END_SRC
#+RESULTS:

* Exceptions

#+BEGIN_SRC ocaml :session multi :cmd ~/Repositories/ocaml-multicore/_install/bin/ocaml
exception Empty
let rec hd = function
  | [] -> raise Empty
  | x :: _ -> x
#+END_SRC
#+RESULTS:

#+BEGIN_SRC ocaml :session multi :cmd ~/Repositories/ocaml-multicore/_install/bin/ocaml
let x = hd [1; 2; 3] in
x + 2
#+END_SRC
#+RESULTS:

* Exception handlers

#+BEGIN_SRC ocaml :session multi :cmd ~/Repositories/ocaml-multicore/_install/bin/ocaml
let x =
  try
    let x = hd [1; 2; 3] in
    Some (x + 2)
  with Empty -> None
#+END_SRC
#+RESULTS:

#+BEGIN_SRC ocaml :session multi :cmd ~/Repositories/ocaml-multicore/_install/bin/ocaml
let x =
  match hd [1; 2; 3] with
  | y -> Some (y + 2)
  | exception Empty -> None
#+END_SRC
#+RESULTS:

* Generators

#+BEGIN_SRC ocaml :session multi :cmd ~/Repositories/ocaml-multicore/_install/bin/ocaml
let evens () =
  let x = ref 0 in
  while true do
    if !x mod 2 = 0 then
      perform (Return !x);
    incr x
  done
#+END_SRC
#+RESULTS:

* Generators

#+BEGIN_SRC ocaml :session multi :cmd ~/Repositories/ocaml-multicore/_install/bin/ocaml
let total n f =
  let count = ref 0 in
  let total = ref 0 in
  match f () with
  | () -> !total
  | effect (Return x) k ->
      total := !total + x;
      count := !count + 1;
      if !count >= n then !total
      else continue k ()

let x = total 5 evens
#+END_SRC
#+RESULTS:

* Unhandled effects

#+BEGIN_SRC ocaml :session multi :cmd ~/Repositories/ocaml-multicore/_install/bin/ocaml
let x = hd []
#+END_SRC
#+RESULTS:

#+BEGIN_SRC ocaml :session multi :cmd ~/Repositories/ocaml-multicore/_install/bin/ocaml
let x = evens ()
#+END_SRC
#+RESULTS:

* Hidden concurrency

#+BEGIN_SRC ocaml :session multi :cmd ~/Repositories/ocaml-multicore/_install/bin/ocaml
#show foo
#+END_SRC
#+RESULTS:

#+BEGIN_SRC ocaml :session multi :cmd ~/Repositories/ocaml-multicore/_install/bin/ocaml
#show evens
#+END_SRC
#+RESULTS:

* Effect systems

** Infer an effect for each expression

\begin{prooftree}
{\color{black}.}\hspace{7em}
\AxiomC{$\Gamma \VDash e
         \HasType t \HasEffect \Row $}
\end{prooftree}

** Attach these effects to function types

\begin{prooftree}
{\color{black}.}\hspace{6em}
\AxiomC{$\Gamma \Et x \HasType A \VDash e
         \HasType B \HasEffect \Row $}
\alwaysSingleLine
\UnaryInfC{$\Gamma \VDash \lambda x . e
            \HasType A \RowTo B \HasEffect 0 $}
\end{prooftree}

\begin{prooftree}
{\color{black}.}\hspace{3em}
\AxiomC{$\Gamma \VDash e
         \HasType A \RowTo B
         \HasEffect \Row^\prime $}
\AxiomC{$\Gamma \VDash e^\prime
         \HasType A \HasEffect \Row^{\prime\prime} $}
\alwaysSingleLine
\BinaryInfC{$\Gamma \VDash e \; e^\prime
             \HasType B \HasEffect \Row + \Row^\prime + \Row^{\prime\prime}$}
\end{prooftree}

* Effect systems

** Infer an effect for each expression

   ~perform Get("hello") + 1~  has type ~int~ and effect
   ~[Get : string -> int]~

** Attach these effects to function types

#+BEGIN_SRC ocaml :session effects-simple :cmd ~/Repositories/ocaml-effects-simple/_install/bin/ocaml
let f () =
  perform Get("hello") + 1
#+END_SRC
#+RESULTS:

* Effect descrptions

- Effect types describe the stack of effect handlers
  required to execute them

- They consist of lists of effects

- Effects with different labels can be permuted

- Effects with the same label cannot be permuted.
  ~[Get : int | Get : string]~ must have an inner handler of ~Get~ with
  type ~int~ and an outer handler of ~Get~ with type ~string~.

* Effect variables

** Higher-order functions require effect variables

#+BEGIN_SRC ocaml :eval never
val map : ('a -[!e]-> 'b) -> 'a list -[!e]-> 'b list
#+END_SRC

** A bit of syntactic sugar makes this easier

#+BEGIN_SRC ocaml :session effects-simple :cmd ~/Repositories/ocaml-effects-simple/_install/bin/ocaml
let rec map f = function
  | [] -> []
  | x :: xs -> f x :: map f xs
#+END_SRC
#+RESULTS:

* Row polymorphism

\begin{equation*}
{\color{black}.}\hspace{7em}
\Delta \Def \Open \Eff \Or \Row \Close
            \Dividor \Open \rho \Close
            \Dividor \Open \Close
\end{equation*}

\begin{prooftree}
{\color{black}.}\hspace{7em}
\AxiomC{$\Equal{\Row}{\Row^\prime}$}
\alwaysSingleLine
\UnaryInfC{$\Equal{\Open \Eff \Or \Row \Close}
          {\Open \Eff \Or \Row^\prime \Close}$}
\end{prooftree}

\begin{equation*}
{\color{black}.}\hspace{7em}
\Equal{\Open \Eff \Or \Eff^\prime \Or \Row \Close}
      {\Open \Eff^\prime \Or \Eff \Or \Row \Close}
\end{equation*}


    /Koka: Programming with Row-polymorphic Effect Types/
    Daan Leijen

    /Extensible records with scoped labels/
    Daan Leijen

* Opening

#+BEGIN_SRC ocaml :eval never
    val log : string -> unit

    let fail () =
      log "Failure"; (* effect: [] *)
      perform Fail() (* effect: [Fail : 'a | !p] *)
#+END_SRC

* Opening

\begin{prooftree}
{\color{black}.}\hspace{5em}
\AxiomC{$\Context \VDash e
         \HasType \forall \overline{\alpha} \overline{\rho}.
         A \HasEffect \Row$}
\AxiomC{$open^+(A) = \forall \overline{\rho^\prime} . B$}
\alwaysSingleLine
\BinaryInfC{$\Context \VDash e
             \HasType B[
             \overline{C} / \overline{\alpha},
             \overline{\Row^\prime} / \overline{\rho},
             \overline{\Row^{\prime\prime}} / \overline{\rho^\prime} ]
             \HasEffect \Row$}
\end{prooftree}

\begin{align*}
{\color{black}.}\hspace{5em}
&open^+(\Open \Eff_1 \Or \ldots \Or \Eff_n \Close) =
  \forall \rho . \Open \Eff_1 \Or \ldots \Or \Eff_n \Or \rho \Close \\
&open^+(A \RowTo B) =
  open^-(A) \xrightarrow{open^+{\Row}} open^+(B) \\
&\ldots
\end{align*}

\begin{align*}
{\color{black}.}\hspace{5em}
&open^-(\Open \Eff_1 \Or \ldots \Or \Eff_n \Close) =
  \Open \Eff_1 \Or \ldots \Or \Eff_n \Close \\
&open^-(A \RowTo B) =
  open^+(A) \xrightarrow{open^-{\Row}} open^-(B) \\
&\ldots
\end{align*}

* Closing

#+BEGIN_SRC ocaml :session effects-simple :cmd ~/Repositories/ocaml-effects-simple/_install/bin/ocaml
let rec yield () =
  perform Yield()
#+END_SRC
#+RESULTS:

* Closing

\begin{prooftree}
{\color{black}.}\hspace{1.5em}
\AxiomC{$\Context \VDash e \HasType A \HasEffect \Open \Close$}
\AxiomC{$\overline{\alpha} \overline{\rho} \notin ftv(\Context)$}
\AxiomC{$close^+(
         \forall \overline{\alpha} \overline{\rho} .
         A) =
         \forall \overline{\alpha} \overline{\rho^\prime} .
         B$}
\alwaysSingleLine
\TrinaryInfC{$\Context \VDash e
             \HasType \forall \overline{\alpha} \overline{\rho^\prime} .
             B
             \HasEffect \Row$}
\end{prooftree}



\begin{equation*}
{\color{black}.}\hspace{5em}
close^+(\forall \overline{\alpha} \overline{\rho} .A) =
  \forall \overline{\alpha} \overline{\rho} .
    A[\;\overline{\Open \Close} \; / \; closable^+(A, \overline{\rho}) \; ]
\end{equation*}

* Closing


\begin{align*}
{\color{black}.}\hspace{1em}
&closable^+(\rho, \overline{\rho}) =
  \overline{\rho} \\
&closable^+(A \RowTo B, \overline{\rho}) =
  closable^-(A, \overline{\rho})
  \cap closable^+({\Row})
  \cap closable^+(B) \\
&\ldots
\end{align*}



\begin{align*}
{\color{black}.}\hspace{1em}
&closable^-(\rho, \overline{\rho}) =
  \overline{\rho} \setminus \rho \\
&closable^-(A \RowTo B, \overline{\rho}) =
  closable^+(A, \overline{\rho})
  \cap closable^-(\Row)
  \cap closable^-(B) \\
&\ldots
\end{align*}

* Type abbreviations

#+BEGIN_SRC ocaml :session effects-simple :cmd ~/Repositories/ocaml-effects-simple/_install/bin/ocaml
type t = int -> int

let mk_t () : t = fun x -> x + 1

let foo f =
  if true then f
  else mk_t ()
#+END_SRC
#+RESULTS:

* Concurrency

#+BEGIN_SRC ocaml :session effects-simple :cmd ~/Repositories/ocaml-effects-simple/_install/bin/ocaml
let rec foo id depth =
  if depth > 0 then begin
    Printf.printf "Forking %d\n" (id * 2 + 1);
    perform Fork ((fun () -> foo (id * 2 + 1) (depth - 1)));
    Printf.printf "Forking %d\n" (id * 2 + 2);
    perform Fork ((fun () -> foo (id * 2 + 2) (depth - 1)))
  end else begin
    Printf.printf "Yielding in %d\n" id;
    perform Yield();
    Printf.printf "Resumed number %d\n" id;
  end
#+END_SRC
#+RESULTS:

* Concurrency

#+BEGIN_SRC ocaml :session effects-simple :cmd ~/Repositories/ocaml-effects-simple/_install/bin/ocaml
effect async = ![Fork : (unit -[async]-> unit) -> unit | Yield : unit]

let yield : unit -[async]-> unit =
  fun () -> perform Yield()

let fork : (unit -[async]-> unit) -[async]-> unit =
  fun f -> perform Fork(f)
#+END_SRC
#+RESULTS:

* Concurrency

#+BEGIN_SRC ocaml :session effects-simple :cmd ~/Repositories/ocaml-effects-simple/_install/bin/ocaml
let rec foo id depth =
  if depth > 0 then begin
    Printf.printf "Forking %d\n" (id * 2 + 1);
    fork ((fun () -> foo (id * 2 + 1) (depth - 1)));
    Printf.printf "Forking %d\n" (id * 2 + 2);
    fork ((fun () -> foo (id * 2 + 2) (depth - 1)))
  end else begin
    Printf.printf "Yielding in %d\n" id;
    yield();
    Printf.printf "Resumed number %d\n" id;
  end
#+END_SRC
#+RESULTS:

* Scheduler

#+BEGIN_SRC ocaml :session effects-simple :cmd ~/Repositories/ocaml-effects-simple/_install/bin/ocaml
let schedule f =
  let run_q = Queue.create () in
  let rec fork f =
    match f () with
    | () ->
        if Queue.is_empty run_q then ()
        else continue (Queue.pop run_q) ()
    | effect Yield(), k ->
        Queue.push k run_q; continue (Queue.pop run_q) ()
    | effect Fork(f), k ->
        Queue.push k run_q; fork f
  in
  fork f
#+END_SRC
#+RESULTS:

* Scheduler

#+BEGIN_SRC ocaml :session effects-simple :cmd ~/Repositories/ocaml-effects-simple/_install/bin/ocaml
let () = schedule (fun () -> foo 0 3)
#+END_SRC
#+RESULTS:

* Exception effects

#+BEGIN_SRC ocaml :session effects-simple :cmd ~/Repositories/ocaml-effects-simple/_install/bin/ocaml
let rec hd = function
  | [] -> throw Empty()
  | x :: _ -> x
#+END_SRC
#+RESULTS:

#+BEGIN_SRC ocaml :session effects-simple :cmd ~/Repositories/ocaml-effects-simple/_install/bin/ocaml
let x = hd [1; 2; 3]
#+END_SRC
#+RESULTS:

* Exception effects

#+BEGIN_SRC ocaml :session effects-simple :cmd ~/Repositories/ocaml-effects-simple/_install/bin/ocaml
let x =
  try
    let x = hd [1; 3; 5] in
    Some (x + 2)
  with effect Empty() -> None
#+END_SRC
#+RESULTS:

* Default handlers
#+BEGIN_SRC ocaml :session effects-simple :cmd ~/Repositories/ocaml-effects-simple/_install/bin/ocaml
let print_int_async i =
  perform ?Print_int(i) as print_int

let () =
  print_int_async 5;
  print_newline ();
  try
    print_int_async 7;
    print_newline ();
  with effect ?Print_int(i), k ->
    Format.printf "Printing %d asynchronously%!" i;
    continue k ()
#+END_SRC
#+RESULTS:

* Hiding

#+BEGIN_SRC ocaml :session effects-simple :cmd ~/Repositories/ocaml-effects-simple/_install/bin/ocaml
let test_to_100 p =
  let rec loop n =
    if p n then loop (n+1)
    else if n >= 100 then ()
    else throw Failed(n)
  in
  match loop 0 with
  | () -> None
  | effect Failed(n) -> Some n
#+END_SRC
#+RESULTS:

* Still to do

- Opening and closing of type aliases

- Fix ~Ctype.moregeneral~

- Implement hiding

- Use effect aliases in printing

- Closing effects when printing errors

- Clean up for review

- Testing and benchmarking

* Row subtyping

- A more expressive approach to row polymorphism that I would like
  to use for effect types (and polymorphic variants)

- I have a mechanised proof of soundness for the polymorphic
  variant case

- Working on mechanised proof of principality

- Some details of the effect case still need working out

- Some details of the relationship with opening/closing still
  need working out

- The approach I've described in this talk will be forwards
  compatible with the row subtyping approach.
